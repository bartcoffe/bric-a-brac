{
  "flashcards": [
    {
      "category": "python",
      "description": "# Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p we want to find a positive integer k, if it exists, such that the sum of the digits of n taken to the successive powers of p is equal to k * n.\n",
      "code": "def dig_pow(n, p):\n    res = (sum([int(x)**(i+p) for i, x in enumerate(str(n))]) / n)\n    return int(res) if res.is_integer() else -1\n",
      "hashtag": "playing_with_digits",
      "status": "ratherHard",
      "id": 4
    },
    {
      "category": "python",
      "description": "Your task is to sort a given string. Each word in the string will contain a single number. This number is the position the word should have in the result.\n\n# \"is2 Thi1s T4est 3a\"  -->  \"Thi1s is2 3a T4est\"",
      "code": "def your_order(sentence):\n    return ' '.join(sorted(sentence.split(), key=lambda w: sorted(w)))\n#utilizes the fact that numbers are always before letters in ASCII",
      "hashtag": "order_ascii",
      "status": "moderate",
      "id": 5
    },
    {
      "category": "javascript",
      "description": "Your task is to write a function that takes a string and return a new string with all vowels removed.",
      "code": "function disemvowel(str) {\n  return str.split('').map((l) => !'aeiou'.split('').includes(l) ? l : '').join('');\n}\n\nfunction disemvowel2(str) {\n  return str.replace(/[aeiou]/gi, '');",
      "hashtag": "remove_vowels",
      "status": "easy",
      "id": 6
    },
    {
      "category": "javascript",
      "description": "square every digit of a number and concatenate them",
      "code": "function squareDigits(i) {\n  return parseInt([...i.toString()].map(x => x*x).join(''))\n}",
      "hashtag": "square_digits",
      "status": "hard",
      "id": 7
    },
    {
      "category": "javascript",
      "description": "Given an array of integers, find the one that appears an odd number of times.",
      "code": "function findOdd2(A) {\n  cDict = {}  \n  A.forEach((x) => {!cDict[x] ? cDict[x] = 1 : cDict[x] += 1 })\n  return parseInt(Object.keys(cDict).find(key => cDict[key] % 2 !== 0));\n}",
      "hashtag": "find_odd",
      "status": "ratherHard",
      "id": 8
    },
    {
      "category": "javascript",
      "description": "these are scores for games. my team is the left one. sum the scores. Now for win get 3 points, draw 1 loss 0.\nlet arg14 = [\"4:4\", \"2:2\", \"3:3\", \"4:4\", \"2:2\", \"3:3\", \"4:4\", \"3:3\", \"4:4\", \"4:4\"]; //10",
      "code": "const points = (games) =>\n    games.reduce((output, current) => {\n        return (output += current[0] > current[2] ? 3 : current[0] === current[2] ? 1 : 0);\n    }, 0);",
      "hashtag": "count_games",
      "status": "moderate",
      "id": 10
    },
    {
      "category": "sql",
      "description": "fdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdf",
      "code": "fdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdfdsfsdffdsfsdfsdsfdf",
      "hashtag": "sadsadas",
      "status": "easy",
      "id": 11
    },
    {
      "category": "java",
      "description": "rtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytry",
      "code": "rtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytryrtyrtyrtyrtytryrtytyrtytryrtyrtyrtyrtytry",
      "hashtag": "fdsfsdfsdfsfsdf",
      "status": "hard",
      "id": 12
    },
    {
      "category": "python",
      "description": "sdasdsadsadadasd",
      "code": "asdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdasasdasdasdas",
      "hashtag": "terterter",
      "status": "ratherHard",
      "id": 16
    }
  ]
}