{
    "flashcards": [
        {
            "category": "python",
            "description": "find digital root e.g. 156 == 1 + 5 + 6 == 12 == 1 + 2 == 3",
            "code": "def digital_root(n: int) -> int:\n    return n if n < 10 else digital_root(sum([int(x) for x in str(n)]))",
            "hashtag": "digital_root",
            "status": "easy",
            "id": 1
        },
        {
            "category": "python",
            "description": "Given an array of integers, find the one that appears an odd number of times.",
            "code": "def find_it(seq: t.List) -> str:\n    return [x for x in set(seq) if seq.count(x)%2 != 0][0]",
            "hashtag": "find_odd_occurences",
            "status": "hard",
            "id": 2
        },
        {
            "category": "python",
            "description": "Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.",
            "code": "def move_zeros(lst):\n    i = -1\n    for num in reversed(lst):\n        if num == 0:\n            lst.append(lst.pop(i))\n        i -= 1\n    return lst",
            "hashtag": "iterate_end_to_start",
            "status": "new",
            "id": 3
        },
        {
            "category": "python",
            "description": "Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p we want to find a positive integer k, if it exists, such that the sum of the digits of n taken to the successive powers of p is equal to k * n.",
            "code": "def dig_pow(n, p):\n    res = (sum([int(x)**(i+p) for i, x in enumerate(str(n))]) / n)\n    return int(res) if res.is_integer() else -1",
            "hashtag": "playing_with_digits",
            "status": "new",
            "id": 4
        },
        {
            "category": "javascript",
            "description": "square every digit of a number and concatenate them",
            "code": "function squareDigits(i) {\n  return parseInt([...i.toString()].map(x => x*x).join(''))\n}\n",
            "hashtag": "square_and_concat",
            "status": "new",
            "id": 5
        }
    ]
}
